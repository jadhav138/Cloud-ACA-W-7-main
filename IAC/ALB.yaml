# Application Load Balancer
 MyLoadBalancer:
 Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
 Properties:
 Subnets:
- !Ref PublicSubnet2A
- !Ref PublicSubnet2B
 SecurityGroups:
- !Ref WebServerSecurityGroup

 # Target Group for ALB
 MyTargetGroup:
 Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
 Properties:
 VpcId: !Ref MyVPC
 Port: 80
 Protocol: 'HTTP'
 Targets:
- Id: !Ref WebServerInstance1A
- Id: !Ref WebServerInstance2B

 # Listener for ALB
 MyListener:
 Type: 'AWS::ElasticLoadBalancingV2::Listener'
 Properties:
 DefaultActions:
- Type: 'forward'
 TargetGroupArn: !Ref MyTargetGroup
 LoadBalancerArn: !Ref MyLoadBalancer
 Port: 80
 Protocol: 'HTTP'

 # Web Server / ALB Security Group
 WebServerSecurityGroup:
 Type: 'AWS::EC2::SecurityGroup'
 Properties:
 GroupDescription: 'Enable HTTP Access'
 VpcId: !Ref MyVPC
 SecurityGroupIngress:
- IpProtocol: 'tcp'
 FromPort: '80'
 ToPort: '80'
 CidrIp: '0.0.0.0/0'

 # WebServerInstance1A:
 WebServerInstance1A:
 Type: 'AWS::EC2::Instance'
 Properties:
 InstanceType: 't2.micro'
 ImageId: 'ami-0c618421e207909d0'
 SubnetId: !Ref PublicSubnet2A
 SecurityGroupIds:
- !Ref WebServerSecurityGroup
 Tags:
- Key: 'Name'
 Value: 'WebServerInstance1A'
 UserData:
 Fn::Base64: !Sub |
#!/bin/bash
yum install -y httpd
systemctl start httpd
systemctl enable httpd
echo "Hello from My Web Server 1A" > /var/www/html/index.html

 # WebServerInstance2B:
 WebServerInstance2B:
 Type: 'AWS::EC2::Instance'
 Properties:
 InstanceType: 't2.micro'
 ImageId: 'ami-0c618421e207909d0'
 SubnetId: !Ref PublicSubnet2B
 SecurityGroupIds:
- !Ref WebServerSecurityGroup
 Tags:
- Key: 'Name'
 Value: 'WebServerInstance2B'
 UserData:
 Fn::Base64: !Sub |
#!/bin/bash
yum install -y httpd
systemctl start httpd
systemctl enable httpd
echo "Hello from My Web Server 1A" > /var/www/html/index.html